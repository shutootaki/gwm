~/D/P/gwm ❯❯❯ pnpm test                                                         ✘ 130 refactor/loading ✭ ✚ ✱

> @shutootaki/gwm@0.1.4 test /Users/shuto_otaki/Develop/Products/gwm
> vitest


 DEV  v3.2.4 /Users/shuto_otaki/Develop/Products/gwm

 ❯ test/use-worktree-copy-files.test.ts (7 tests | 3 failed) 48ms
   ✓ useWorktree copy_ignored_files > should copy ignored files when copy_ignored_files is enabled 19ms
   × useWorktree copy_ignored_files > should not add action when no files to copy 4ms
     → expected "spy" to be called with arguments: [ { …(2) } ]

Number of calls: 0

   × useWorktree copy_ignored_files > should skip copy when main worktree not found 1ms
     → expected "spy" to be called with arguments: [ { …(2) } ]

Number of calls: 0

   ✓ useWorktree copy_ignored_files > should skip copy when source and target are the same 0ms
   × useWorktree copy_ignored_files > should not copy files when copy_ignored_files is disabled 1ms
     → expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array []


Number of calls: 1

   ✓ useWorktree copy_ignored_files > should handle partial copy success 11ms
   ✓ useWorktree copy_ignored_files > should combine copy action with other actions 12ms
 ❯ test/use-worktree-options.test.ts (3 tests | 3 failed) 14ms
   × useWorktree option flags > should push "VS Code opened" action when openCode=true 9ms
     → expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

   × useWorktree option flags > should push "Cursor opened" action when openCursor=true 3ms
     → expected "spy" to be called with arguments: [ …(2) ]

Received: 

  1st spy call:

  [
    "/Users/test/git-worktrees/project/feature-test",
-   "cursor",
+   "code",
  ]


Number of calls: 1

   × useWorktree option flags > should spawn subshell and exit when outputPath=true 2ms
     → expected "spy" to be called with arguments: [ Any<String>, ObjectContaining{…} ]

Number of calls: 0

 ❯ test/git-remote-branches.test.ts (8 tests | 8 failed) 9ms
   × getRemoteBranchesWithInfo > should parse remote branches with info correctly 4ms
     → expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

   × getRemoteBranchesWithInfo > should handle empty output 2ms
     → expected Promise{…} to deeply equal []
   × getRemoteBranchesWithInfo > should handle branches with missing fields 1ms
     → expected Promise{…} to have property 'length'
   × getRemoteBranchesWithInfo > should handle branches with pipe characters in commit message 1ms
     → expected Promise{…} to have property 'length'
   × getRemoteBranchesWithInfo > should filter out HEAD references 1ms
     → expected Promise{…} to have property 'length'
   × getRemoteBranchesWithInfo > should handle newlines in output correctly 1ms
     → expected Promise{…} to have property 'length'
   × getRemoteBranchesWithInfo > should throw error when git command fails 0ms
     → expected [Function] to throw an error
   × getRemoteBranchesWithInfo > should handle non-Error exceptions 0ms
     → expected [Function] to throw an error
 ✓ test/worktree-selector.test.ts (9 tests) 432ms
 ✓ test/use-worktree-virtualenv.test.ts (8 tests) 391ms
 ✓ test/worktree-clean.test.ts (4 tests) 221ms
 ✓ test/worktree-remove-clean.test.ts (2 tests) 120ms
 ✓ test/worktree-remove.test.ts (8 tests) 33ms
 ✓ test/base-path-token.test.ts (2 tests) 34ms
 ✓ test/integration/virtualenv-integration.test.ts (6 tests) 14ms
 ✓ test/worktree-go.test.ts (11 tests) 13ms
 ✓ test/code.test.ts (18 tests) 5ms
 ✓ test/virtualenv.test.ts (17 tests) 6ms
 ✓ test/config.test.ts (12 tests) 5ms
 ✓ test/shell.test.ts (25 tests) 5ms
 ✓ test/git-extended.test.ts (22 tests) 5ms
 ✓ test/utils/formatting.test.ts (10 tests) 5ms
 ✓ test/nonfunctional.copyFiles.test.ts (2 tests) 5ms
 ✓ test/interactive-ui.test.ts (19 tests) 5ms
 ❯ test/git.test.ts (27 tests | 7 failed) 5014ms
   ✓ parseWorktrees > should parse git worktree list --porcelain output correctly 2ms
   ✓ parseWorktrees > should handle bare repository correctly 0ms
   ✓ parseWorktrees > should handle detached HEAD correctly 0ms
   ✓ parseWorktrees > should mark current directory as ACTIVE 0ms
   ✓ getWorktreesWithStatus > should throw error when not in git repository 1ms
   × getWorktreesWithStatus > should return worktrees with status 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × fetchAndPrune > should execute git fetch --prune origin successfully 1ms
     → expected "spy" to be called with arguments: [ 'git fetch --prune origin', …(1) ]

Number of calls: 0

   × fetchAndPrune > should throw error when no remote origin exists 1ms
     → expected [Function] to throw an error
   × fetchAndPrune > should throw generic error for other failures 0ms
     → expected [Function] to throw an error
   × removeWorktree > should remove worktree successfully 0ms
     → expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

   × removeWorktree > should remove worktree with force flag 0ms
     → expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

   × removeWorktree > should throw error when removal fails 0ms
     → expected [Function] to throw an error
   ✓ getMainWorktreePath > should return main worktree path when isMain flag is set 0ms
   ✓ getMainWorktreePath > should return bare repository path as main 0ms
   ✓ getMainWorktreePath > should return null when no worktrees exist 0ms
   ✓ getMainWorktreePath > should return null on error 0ms
   ✓ getIgnoredFiles > should find ignored files matching patterns 1ms
   ✓ getIgnoredFiles > should return empty array when no files match patterns 0ms
   ✓ getIgnoredFiles > should handle wildcard patterns correctly 0ms
   ✓ copyFiles > should copy files successfully 0ms
   ✓ copyFiles > should skip non-existent source files 0ms
   ✓ copyFiles > should handle copy errors gracefully 0ms
   ✓ copyFiles > should return empty array for empty file list 0ms
   ✓ copyFiles > should skip virtual environment directories 0ms
   ✓ copyFiles > should handle symbolic links pointing within source directory 0ms
   ✓ copyFiles > should preserve external symbolic links 0ms
   ✓ copyFiles > should handle mixed files, virtual envs, and symlinks 0ms
 ✓ test/editor.test.ts (11 tests) 4ms
 ✓ test/multi-select-list.test.ts (26 tests) 4ms
stdout | test/go.test.ts > gwm go command integration tests > should auto-select when only one worktree matches query
/Users/test/git-worktrees/project/unique-branch

stdout | test/go.test.ts > gwm go command integration tests > should handle long path names appropriately
/Users/test/very/long/nested/directory/structure/worktrees/project-with-very-long-name/feature-branch-with-very-long-descriptive-name

stdout | test/go.test.ts > gwm go command integration tests > should work correctly with shell function integration
/Users/test/git-worktrees/project/feature-branch

 ✓ test/go.test.ts (10 tests) 4ms
 ✓ test/add.test.ts (11 tests) 4ms
 ✓ test/text-input.test.ts (24 tests) 4ms
 ✓ test/cli.test.ts (38 tests) 5ms
 ✓ test/git.branch-utils.test.ts (9 tests) 4ms
 ✓ test/path-utils.test.ts (23 tests) 4ms
 ✓ test/use-editable-text.test.ts (27 tests) 4ms
 ✓ test/keyboard.test.ts (19 tests) 3ms
 ✓ test/formatting.test.ts (23 tests) 3ms
 ✓ test/select-all-shortcut.test.ts (3 tests) 2ms
 ✓ test/security-shell-escape.test.ts (15 tests) 2ms
 ✓ test/scroll-selection.test.ts (3 tests) 2ms
 ❯ test/error-handling.test.ts (15 tests | 12 failed) 20024ms
   ✓ Error Handling Tests > Git Repository Validation > should handle when not in a git repository 2ms
   × Error Handling Tests > Git Repository Validation > should handle permission denied errors in git repository 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × Error Handling Tests > Network and Remote Operations > should handle network timeout during fetch 2ms
     → expected [Function] to throw an error
   × Error Handling Tests > Network and Remote Operations > should handle authentication errors during fetch 0ms
     → expected [Function] to throw an error
   × Error Handling Tests > Network and Remote Operations > should handle missing remote origin 0ms
     → expected [Function] to throw an error
   × Error Handling Tests > Worktree Removal Errors > should handle worktree removal with uncommitted changes 0ms
     → expected [Function] to throw an error
   × Error Handling Tests > Worktree Removal Errors > should handle worktree removal of non-existent path 0ms
     → expected [Function] to throw an error
   × Error Handling Tests > Worktree Removal Errors > should handle worktree removal with locked worktree 0ms
     → expected [Function] to throw an error
   × Error Handling Tests > Malformed Git Output > should handle malformed git worktree list output 5003ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × Error Handling Tests > Malformed Git Output > should handle empty git worktree list output 5001ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ Error Handling Tests > System-level Errors > should handle command not found errors 1ms
   × Error Handling Tests > System-level Errors > should handle out of memory errors 5002ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ Error Handling Tests > Configuration Errors > should handle config loading errors gracefully 1ms
   × Error Handling Tests > Path and File System Errors > should handle invalid path characters in worktree names 3ms
     → expected [Function] to throw an error
   × Error Handling Tests > Path and File System Errors > should handle file system full errors 1ms
     → expected [Function] to throw an error
 ❯ test/list.test.ts (9 tests | 9 failed) 45044ms
   × gwm list command integration tests > should display worktree list with correct format 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should mark current worktree as ACTIVE with asterisk 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should detect PRUNABLE worktrees (merged branches) 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should detect PRUNABLE worktrees (deleted remote branches) 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should work with ls alias 5004ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should display detached HEAD worktrees correctly 5002ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should display bare repository correctly 5003ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should work with multiple main branches configuration 5005ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × gwm list command integration tests > should handle empty worktree list 5011ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 42 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Git Repository Validation > should handle permission denied errors in git repository
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/error-handling.test.ts:50:5
     48| 
     49|     // Gitリポジトリ内での権限不足エラーのハンドリングをテスト
     50|     it('should handle permission denied errors in git repository', async () => {
       |     ^
     51|       mockExecSync.mockImplementation((command) => {
     52|         if (command === 'git rev-parse --git-dir') {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Network and Remote Operations > should handle network timeout during fetch
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:78:37
     76|       });
     77| 
     78|       expect(() => fetchAndPrune()).toThrow(
       |                                     ^
     79|         "Failed to fetch and prune from remote: fatal: unable to access 'https://github.com/repo.gi…
     80|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Network and Remote Operations > should handle authentication errors during fetch
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:92:37
     90|       });
     91| 
     92|       expect(() => fetchAndPrune()).toThrow(
       |                                     ^
     93|         "Failed to fetch and prune from remote: fatal: Authentication failed for 'https://github.co…
     94|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Network and Remote Operations > should handle missing remote origin
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:107:37
    105|       });
    106| 
    107|       expect(() => fetchAndPrune()).toThrow(
       |                                     ^
    108|         'No remote named "origin" found. Please configure a remote repository.'
    109|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Worktree Removal Errors > should handle worktree removal with uncommitted changes
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:123:57
    121|       });
    122| 
    123|       expect(() => removeWorktree('/path/to/worktree')).toThrow(
       |                                                         ^
    124|         "Failed to remove worktree /path/to/worktree: fatal: 'path/to/worktree' contains modified o…
    125|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Worktree Removal Errors > should handle worktree removal of non-existent path
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:137:60
    135|       });
    136| 
    137|       expect(() => removeWorktree('/path/to/nonexistent')).toThrow(
       |                                                            ^
    138|         "Failed to remove worktree /path/to/nonexistent: fatal: 'path/to/nonexistent' is not a work…
    139|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Worktree Removal Errors > should handle worktree removal with locked worktree
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:151:57
    149|       });
    150| 
    151|       expect(() => removeWorktree('/path/to/worktree')).toThrow(
       |                                                         ^
    152|         "Failed to remove worktree /path/to/worktree: fatal: 'path/to/worktree' is locked; use --fo…
    153|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Malformed Git Output > should handle malformed git worktree list output
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/error-handling.test.ts:159:5
    157|   describe('Malformed Git Output', () => {
    158|     // 不正な形式のgit worktree list出力のハンドリングをテスト
    159|     it('should handle malformed git worktree list output', async () => {
       |     ^
    160|       mockExecSync.mockImplementation((command) => {
    161|         if (command === 'git rev-parse --git-dir') {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Malformed Git Output > should handle empty git worktree list output
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/error-handling.test.ts:176:5
    174| 
    175|     // 空のgit worktree list出力のハンドリングをテスト
    176|     it('should handle empty git worktree list output', async () => {
       |     ^
    177|       mockExecSync.mockImplementation((command) => {
    178|         if (command === 'git rev-parse --git-dir') {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > System-level Errors > should handle out of memory errors
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/error-handling.test.ts:207:5
    205| 
    206|     // システムメモリ不足エラーのハンドリングをテスト
    207|     it('should handle out of memory errors', async () => {
       |     ^
    208|       mockExecSync.mockImplementation((command) => {
    209|         if (command === 'git rev-parse --git-dir') {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Path and File System Errors > should handle invalid path characters in worktree names
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:248:49
    246|       });
    247| 
    248|       expect(() => removeWorktree(invalidPath)).toThrow(
       |                                                 ^
    249|         `Failed to remove worktree ${invalidPath}: fatal: invalid path`
    250|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/42]⎯

 FAIL  test/error-handling.test.ts > Error Handling Tests > Path and File System Errors > should handle file system full errors
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/error-handling.test.ts:260:57
    258|       });
    259| 
    260|       expect(() => removeWorktree('/path/to/worktree')).toThrow(
       |                                                         ^
    261|         'Failed to remove worktree /path/to/worktree: fatal: No space left on device'
    262|       );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should parse remote branches with info correctly
AssertionError: expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

 ❯ test/git-remote-branches.test.ts:28:26
     26|     const result = getRemoteBranchesWithInfo();
     27| 
     28|     expect(mockExecSync).toHaveBeenCalledWith(
       |                          ^
     29|       'git for-each-ref refs/remotes --format="%(refname:short)|%(committerdate:iso8601-strict)|%(c…
     30|       {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should handle empty output
AssertionError: expected Promise{…} to deeply equal []

- Expected: 
[]

+ Received: 
Promise {}

 ❯ test/git-remote-branches.test.ts:68:20
     66|     const result = getRemoteBranchesWithInfo();
     67| 
     68|     expect(result).toEqual([]);
       |                    ^
     69|   });
     70| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should handle branches with missing fields
AssertionError: expected Promise{…} to have property 'length'
 ❯ test/git-remote-branches.test.ts:80:20
     78|     const result = getRemoteBranchesWithInfo();
     79| 
     80|     expect(result).toHaveLength(3);
       |                    ^
     81| 
     82|     expect(result[0]).toEqual({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should handle branches with pipe characters in commit message
AssertionError: expected Promise{…} to have property 'length'
 ❯ test/git-remote-branches.test.ts:114:20
    112|     const result = getRemoteBranchesWithInfo();
    113| 
    114|     expect(result).toHaveLength(1);
       |                    ^
    115|     expect(result[0]).toEqual({
    116|       name: 'feature',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should filter out HEAD references
AssertionError: expected Promise{…} to have property 'length'
 ❯ test/git-remote-branches.test.ts:133:20
    131|     const result = getRemoteBranchesWithInfo();
    132| 
    133|     expect(result).toHaveLength(1);
       |                    ^
    134|     expect(result[0].name).toBe('main');
    135|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should handle newlines in output correctly
AssertionError: expected Promise{…} to have property 'length'
 ❯ test/git-remote-branches.test.ts:149:20
    147|     const result = getRemoteBranchesWithInfo();
    148| 
    149|     expect(result).toHaveLength(2);
       |                    ^
    150|     expect(result[0].name).toBe('branch1');
    151|     expect(result[1].name).toBe('branch2');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should throw error when git command fails
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/git-remote-branches.test.ts:159:47
    157|     });
    158| 
    159|     expect(() => getRemoteBranchesWithInfo()).toThrow(
       |                                               ^
    160|       'Failed to get remote branches: git command failed'
    161|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/42]⎯

 FAIL  test/git-remote-branches.test.ts > getRemoteBranchesWithInfo > should handle non-Error exceptions
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/git-remote-branches.test.ts:169:47
    167|     });
    168| 
    169|     expect(() => getRemoteBranchesWithInfo()).toThrow(
       |                                               ^
    170|       'Failed to get remote branches: Unknown error'
    171|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/42]⎯

 FAIL  test/git.test.ts > getWorktreesWithStatus > should return worktrees with status
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/git.test.ts:238:3
    236| 
    237|   // ステータス付きworktreeリストの取得をテスト
    238|   it('should return worktrees with status', async () => {
       |   ^
    239|     const porcelainOutput = `worktree /Users/test/project
    240| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/42]⎯

 FAIL  test/git.test.ts > fetchAndPrune > should execute git fetch --prune origin successfully
AssertionError: expected "spy" to be called with arguments: [ 'git fetch --prune origin', …(1) ]

Number of calls: 0

 ❯ test/git.test.ts:275:26
    273| 
    274|     expect(() => fetchAndPrune()).not.toThrow();
    275|     expect(mockExecSync).toHaveBeenCalledWith('git fetch --prune origin', {
       |                          ^
    276|       stdio: 'ignore',
    277|       cwd: process.cwd(),

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/42]⎯

 FAIL  test/git.test.ts > fetchAndPrune > should throw error when no remote origin exists
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/git.test.ts:288:35
    286|     });
    287| 
    288|     expect(() => fetchAndPrune()).toThrow(
       |                                   ^
    289|       'No remote named "origin" found. Please configure a remote repository.'
    290|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/42]⎯

 FAIL  test/git.test.ts > fetchAndPrune > should throw generic error for other failures
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/git.test.ts:299:35
    297|     });
    298| 
    299|     expect(() => fetchAndPrune()).toThrow(
       |                                   ^
    300|       'Failed to fetch and prune from remote: Network error'
    301|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/42]⎯

 FAIL  test/git.test.ts > removeWorktree > should remove worktree successfully
AssertionError: expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

 ❯ test/git.test.ts:315:26
    313| 
    314|     expect(() => removeWorktree('/path/to/worktree')).not.toThrow();
    315|     expect(mockExecSync).toHaveBeenCalledWith(
       |                          ^
    316|       "git worktree remove '/path/to/worktree'",
    317|       { cwd: process.cwd() }

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/42]⎯

 FAIL  test/git.test.ts > removeWorktree > should remove worktree with force flag
AssertionError: expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

 ❯ test/git.test.ts:326:26
    324| 
    325|     expect(() => removeWorktree('/path/to/worktree', true)).not.toThrow();
    326|     expect(mockExecSync).toHaveBeenCalledWith(
       |                          ^
    327|       "git worktree remove '/path/to/worktree' --force",
    328|       { cwd: process.cwd() }

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/42]⎯

 FAIL  test/git.test.ts > removeWorktree > should throw error when removal fails
AssertionError: expected [Function] to throw an error

- Expected: 
null

+ Received: 
undefined

 ❯ test/git.test.ts:338:55
    336|     });
    337| 
    338|     expect(() => removeWorktree('/path/to/worktree')).toThrow(
       |                                                       ^
    339|       'Failed to remove worktree /path/to/worktree: worktree has uncommitted changes'
    340|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should display worktree list with correct format
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:37:3
     35| 
     36|   // 基本的なworktreeリスト表示をテスト
     37|   it('should display worktree list with correct format', async () => {
       |   ^
     38|     const porcelainOutput = `worktree /Users/test/project
     39| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should mark current worktree as ACTIVE with asterisk
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:114:3
    112| 
    113|   // ACTIVE状態の表示をテスト
    114|   it('should mark current worktree as ACTIVE with asterisk', async () => {
       |   ^
    115|     const originalCwd = process.cwd;
    116|     process.cwd = vi.fn(

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should detect PRUNABLE worktrees (merged branches)
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:154:3
    152| 
    153|   // PRUNABLE状態（マージ済み）の検出をテスト
    154|   it('should detect PRUNABLE worktrees (merged branches)', async () => {
       |   ^
    155|     const porcelainOutput = `worktree /Users/test/project
    156| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should detect PRUNABLE worktrees (deleted remote branches)
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:198:3
    196| 
    197|   // PRUNABLE状態（リモート削除済み）の検出をテスト
    198|   it('should detect PRUNABLE worktrees (deleted remote branches)', async () => {
       |   ^
    199|     const porcelainOutput = `worktree /Users/test/project
    200| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should work with ls alias
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:234:3
    232| 
    233|   // エイリアス `ls` コマンドの動作をテスト
    234|   it('should work with ls alias', async () => {
       |   ^
    235|     const porcelainOutput = `worktree /Users/test/project
    236| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should display detached HEAD worktrees correctly
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:256:3
    254| 
    255|   // HEADが切り離し状態のworktree表示をテスト
    256|   it('should display detached HEAD worktrees correctly', async () => {
       |   ^
    257|     const porcelainOutput = `worktree /Users/test/project
    258| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should display bare repository correctly
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:285:3
    283| 
    284|   // bareリポジトリの表示をテスト
    285|   it('should display bare repository correctly', async () => {
       |   ^
    286|     const porcelainOutput = `worktree /Users/test/project.git
    287| HEAD 1234567890abcdef1234567890abcdef12345678

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should work with multiple main branches configuration
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:311:3
    309| 
    310|   // 複数メインブランチ設定での動作をテスト
    311|   it('should work with multiple main branches configuration', async () => {
       |   ^
    312|     vi.mocked(loadConfig).mockReturnValue({
    313|       worktree_base_path: '/Users/test/git-worktrees',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/42]⎯

 FAIL  test/list.test.ts > gwm list command integration tests > should handle empty worktree list
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ test/list.test.ts:360:3
    358| 
    359|   // 空のworktreeリストの処理をテスト
    360|   it('should handle empty worktree list', async () => {
       |   ^
    361|     mockExecSync.mockImplementation((command) => {
    362|       if (command === 'git rev-parse --git-dir') {

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/42]⎯

 FAIL  test/use-worktree-copy-files.test.ts > useWorktree copy_ignored_files > should not add action when no files to copy
AssertionError: expected "spy" to be called with arguments: [ { …(2) } ]

Number of calls: 0

 ❯ test/use-worktree-copy-files.test.ts:138:23
    136|     );
    137| 
    138|     expect(onSuccess).toHaveBeenCalledWith({
       |                       ^
    139|       path: '/Users/test/git-worktrees/project/feature-test',
    140|       actions: [],

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/42]⎯

 FAIL  test/use-worktree-copy-files.test.ts > useWorktree copy_ignored_files > should skip copy when main worktree not found
AssertionError: expected "spy" to be called with arguments: [ { …(2) } ]

Number of calls: 0

 ❯ test/use-worktree-copy-files.test.ts:160:23
    158|     expect(mockGetIgnoredFiles).not.toHaveBeenCalled();
    159|     expect(mockCopyFiles).not.toHaveBeenCalled();
    160|     expect(onSuccess).toHaveBeenCalledWith({
       |                       ^
    161|       path: '/Users/test/git-worktrees/project/feature-test',
    162|       actions: [],

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/42]⎯

 FAIL  test/use-worktree-copy-files.test.ts > useWorktree copy_ignored_files > should not copy files when copy_ignored_files is disabled
AssertionError: expected "spy" to not be called at all, but actually been called 1 times

Received: 

  1st spy call:

    Array []


Number of calls: 1

 ❯ test/use-worktree-copy-files.test.ts:211:41
    209| 
    210|     // copy_ignored_filesが無効で隔離も無効なので、getMainWorktreePath等は呼ばれない
    211|     expect(mockGetMainWorktreePath).not.toHaveBeenCalled();
       |                                         ^
    212|     expect(mockGetIgnoredFiles).not.toHaveBeenCalled();
    213|     expect(mockCopyFiles).not.toHaveBeenCalled();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/42]⎯

 FAIL  test/use-worktree-options.test.ts > useWorktree option flags > should push "VS Code opened" action when openCode=true
AssertionError: expected "spy" to be called with arguments: [ …(2) ]

Number of calls: 0

 ❯ test/use-worktree-options.test.ts:85:28
     83|     );
     84| 
     85|     expect(openWithEditor).toHaveBeenCalledWith(
       |                            ^
     86|       '/Users/test/git-worktrees/project/feature-test',
     87|       'code'

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/42]⎯

 FAIL  test/use-worktree-options.test.ts > useWorktree option flags > should push "Cursor opened" action when openCursor=true
AssertionError: expected "spy" to be called with arguments: [ …(2) ]

Received: 

  1st spy call:

  [
    "/Users/test/git-worktrees/project/feature-test",
-   "cursor",
+   "code",
  ]


Number of calls: 1

 ❯ test/use-worktree-options.test.ts:110:28
    108|     );
    109| 
    110|     expect(openWithEditor).toHaveBeenCalledWith(
       |                            ^
    111|       '/Users/test/git-worktrees/project/feature-test',
    112|       'cursor'

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/42]⎯

 FAIL  test/use-worktree-options.test.ts > useWorktree option flags > should spawn subshell and exit when outputPath=true
AssertionError: expected "spy" to be called with arguments: [ Any<String>, ObjectContaining{…} ]

Number of calls: 0

 ❯ test/use-worktree-options.test.ts:142:27
    140|     );
    141| 
    142|     expect(mockSpawnSync).toHaveBeenCalledWith(
       |                           ^
    143|       expect.any(String), // シェルのパス
    144|       expect.objectContaining({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/42]⎯


 Test Files  6 failed | 30 passed (36)
      Tests  42 failed | 444 passed (486)
   Start at  09:20:09
   Duration  45.38s (transform 409ms, setup 0ms, collect 2.05s, tests 71.50s, environment 3ms, prepare 1.43s)

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
