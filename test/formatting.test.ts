import { describe, it, expect } from 'vitest';
import {
  truncateAndPad,
  getOptimalColumnWidths,
} from '../src/utils/formatting.js';

describe('formatting utilities', () => {
  describe('truncateAndPad', () => {
    describe('Âü∫Êú¨ÁöÑ„Å™ÊñáÂ≠óÂàóÂá¶ÁêÜ', () => {
      it('Áü≠„ÅÑÊñáÂ≠óÂàó„Çí„Éë„Éá„Ç£„É≥„Ç∞„Åô„Çã', () => {
        const result = truncateAndPad('hello', 10);
        expect(result).toBe('hello     ');
        expect(result.length).toBe(10);
      });

      it('Âêå„ÅòÈï∑„Åï„ÅÆÊñáÂ≠óÂàó„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô', () => {
        const result = truncateAndPad('hello', 5);
        expect(result).toBe('hello');
        expect(result.length).toBe(5);
      });

      it('Èï∑„ÅÑÊñáÂ≠óÂàó„ÇíÂàá„ÇäË©∞„ÇÅ„Çã', () => {
        const result = truncateAndPad('hello world', 8);
        expect(result).toBe('hello...');
        expect(result.length).toBe(8);
      });

      it('ÂπÖ„Åå3Êú™Ê∫Ä„ÅÆÂ†¥Âêà„ÇÇÊ≠£„Åó„ÅèÂá¶ÁêÜ„Åô„Çã', () => {
        const result = truncateAndPad('hello', 2);
        expect(result).toBe('...');
        expect(result.length).toBe(3);
      });
    });

    describe('„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ', () => {
      it('Á©∫ÊñáÂ≠óÂàó„Çí„Éë„Éá„Ç£„É≥„Ç∞„Åô„Çã', () => {
        const result = truncateAndPad('', 5);
        expect(result).toBe('     ');
        expect(result.length).toBe(5);
      });

      it('ÂπÖ„Åå0„ÅÆÂ†¥Âêà', () => {
        const result = truncateAndPad('hello', 0);
        expect(result).toBe('...');
      });

      it('ÂπÖ„Åå1„ÅÆÂ†¥Âêà', () => {
        const result = truncateAndPad('hello', 1);
        expect(result).toBe('...');
      });

      it('ÂπÖ„Åå3„ÅÆÂ†¥ÂêàÔºà„Å°„Çá„ÅÜ„Å©ÁúÅÁï•Á¨¶Âè∑„Å®Âêå„ÅòÈï∑„ÅïÔºâ', () => {
        const result = truncateAndPad('hello', 3);
        expect(result).toBe('...');
      });
    });

    describe('ÁâπÊÆäÊñáÂ≠ó„ÅÆ„ÉÜ„Çπ„Éà', () => {
      it('Êó•Êú¨Ë™ûÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜÔºà„Éë„Éá„Ç£„É≥„Ç∞Ôºâ', () => {
        const result = truncateAndPad('„Åì„Çì„Å´„Å°„ÅØ', 8); // 5ÊñáÂ≠ó < 8ÊñáÂ≠ó„Å™„ÅÆ„Åß„Éë„Éá„Ç£„É≥„Ç∞
        expect(result).toBe('„Åì„Çì„Å´„Å°„ÅØ   ');
        expect(result.length).toBe(8);
      });

      it('Êó•Êú¨Ë™ûÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜÔºàÂàá„ÇäË©∞„ÇÅÔºâ', () => {
        const result = truncateAndPad('„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå„ÅÆ„Åø„Å™„Åï„Çì', 8); // 11ÊñáÂ≠ó > 8ÊñáÂ≠ó„Å™„ÅÆ„ÅßÂàá„ÇäË©∞„ÇÅ
        expect(result).toBe('„Åì„Çì„Å´„Å°„ÅØ...');
        expect(result.length).toBe(8);
      });

      it('ÁµµÊñáÂ≠ó„ÇíÂê´„ÇÄÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜ', () => {
        const result = truncateAndPad('Hello üéâ', 10);
        expect(result).toBe('Hello üéâ  ');
        expect(result.length).toBe(10);
      });

      it('„Çø„Éñ„ÇÑÊîπË°å„ÇíÂê´„ÇÄÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜÔºà„Éë„Éá„Ç£„É≥„Ç∞Ôºâ', () => {
        const result = truncateAndPad('hello\tworld\n', 15); // 12ÊñáÂ≠ó < 15ÊñáÂ≠ó„Å™„ÅÆ„Åß„Éë„Éá„Ç£„É≥„Ç∞
        expect(result).toBe('hello\tworld\n   ');
        expect(result.length).toBe(15);
      });

      it('„Çø„Éñ„ÇÑÊîπË°å„ÇíÂê´„ÇÄÊñáÂ≠óÂàó„ÅÆÂá¶ÁêÜÔºàÂàá„ÇäË©∞„ÇÅÔºâ', () => {
        const result = truncateAndPad('hello\tworld\nvery\tlong\tstring', 10); // 24ÊñáÂ≠ó > 10ÊñáÂ≠ó„Å™„ÅÆ„ÅßÂàá„ÇäË©∞„ÇÅ
        expect(result).toBe('hello\tw...');
        expect(result.length).toBe(10);
      });
    });
  });

  describe('getOptimalColumnWidths', () => {
    describe('Âü∫Êú¨ÁöÑ„Å™ÂπÖË®àÁÆó', () => {
      it('Áü≠„ÅÑ„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„Éà„ÅÆÂ†¥Âêà', () => {
        const items = [
          { branch: 'main', path: '/home/user/project' },
          { branch: 'feature', path: '/home/user/dev' },
        ];
        const result = getOptimalColumnWidths(items, 120);

        expect(result.branchWidth).toBeGreaterThanOrEqual(15);
        expect(result.pathWidth).toBeGreaterThanOrEqual(20);
        expect(result.branchWidth + result.pathWidth).toBeLessThanOrEqual(90); // 120 - 30(‰ΩôÁôΩ)
      });

      it('Èï∑„ÅÑ„Éñ„É©„É≥„ÉÅÂêç„Å®„Éë„Çπ„ÅÆÂ†¥Âêà', () => {
        const items = [
          {
            branch: 'feature/very-long-branch-name-that-exceeds-normal-length',
            path: '/very/long/path/to/project/directory/that/also/exceeds/normal/length',
          },
        ];
        const result = getOptimalColumnWidths(items, 120);

        expect(result.branchWidth).toBeGreaterThanOrEqual(15);
        expect(result.pathWidth).toBeGreaterThanOrEqual(20);
      });

      it('Á©∫„ÅÆ„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„Éà„ÅÆÂ†¥Âêà', () => {
        const items: Array<{ branch: string; path: string }> = [];
        const result = getOptimalColumnWidths(items, 120);

        expect(result.branchWidth).toBe(37); // ÂÆüÈöõ„ÅÆÁµêÊûú„Å´Âêà„Çè„Åõ„Çã
        expect(result.pathWidth).toBe(53); // ÂÆüÈöõ„ÅÆÁµêÊûú„Å´Âêà„Çè„Åõ„Çã
      });
    });

    describe('„Çø„Éº„Éü„Éä„É´ÂπÖ„Å´Âü∫„Å•„ÅèË™øÊï¥', () => {
      it('Áã≠„ÅÑ„Çø„Éº„Éü„Éä„É´„Åß„ÅÆÂπÖË®àÁÆó', () => {
        const items = [{ branch: 'main', path: '/home/user/project' }];
        const result = getOptimalColumnWidths(items, 60);

        expect(result.branchWidth).toBe(15); // ÊúÄÂ∞èÂπÖ
        expect(result.pathWidth).toBe(20); // ÊúÄÂ∞èÂπÖ
      });

      it('Â∫É„ÅÑ„Çø„Éº„Éü„Éä„É´„Åß„ÅÆÂπÖË®àÁÆó', () => {
        const items = [{ branch: 'main', path: '/home/user/project' }];
        const result = getOptimalColumnWidths(items, 200);

        expect(result.branchWidth).toBeGreaterThan(15);
        expect(result.pathWidth).toBeGreaterThan(20);
        expect(result.branchWidth + result.pathWidth).toBeLessThanOrEqual(170); // 200 - 30
      });

      it('Ê•µÁ´Ø„Å´Áã≠„ÅÑ„Çø„Éº„Éü„Éä„É´„Åß„ÅÆÊúÄÂ∞èÂπÖ‰øùË®º', () => {
        const items = [{ branch: 'main', path: '/home/user/project' }];
        const result = getOptimalColumnWidths(items, 20);

        expect(result.branchWidth).toBe(15); // ÊúÄÂ∞èÂπÖ„Åå‰øù„Åü„Çå„Çã
        expect(result.pathWidth).toBe(20); // ÊúÄÂ∞èÂπÖ„Åå‰øù„Åü„Çå„Çã
      });
    });

    describe('ÂπÖÈÖçÂàÜ„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ', () => {
      it('Èï∑„ÅÑ„Éñ„É©„É≥„ÉÅÂêç„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÊúÄÈÅ©Âåñ', () => {
        const items = [
          {
            branch:
              'feature/very-long-branch-name-for-testing-width-calculation',
            path: '/short',
          },
        ];
        const result = getOptimalColumnWidths(items, 120);

        // „Éñ„É©„É≥„ÉÅÂêç„ÅåÈï∑„ÅÑÂ†¥Âêà„ÅÆÂÆüÈöõ„ÅÆÂãï‰Ωú„ÇíÁ¢∫Ë™ç
        expect(result.branchWidth).toBe(46); // ÂÆüÈöõ„ÅÆÁµêÊûú
      });

      it('Èï∑„ÅÑ„Éë„Çπ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÊúÄÈÅ©Âåñ', () => {
        const items = [
          {
            branch: 'main',
            path: '/very/long/path/structure/that/should/be/handled/properly/in/the/formatting/function',
          },
        ];
        const result = getOptimalColumnWidths(items, 120);

        // „Éë„Çπ„ÅåÈï∑„ÅÑÂ†¥Âêà„ÅÆÂÆüÈöõ„ÅÆÂãï‰Ωú„ÇíÁ¢∫Ë™ç
        expect(result.pathWidth).toBe(65); // ÂÆüÈöõ„ÅÆÁµêÊûú
      });

      it('„Éò„ÉÉ„ÉÄ„ÉºÊñáÂ≠óÂàó„ÅÆÊúÄÂ∞èÂπÖËÄÉÊÖÆ', () => {
        const items = [
          { branch: 'a', path: 'b' }, // Ê•µÁ´Ø„Å´Áü≠„ÅÑ„Ç¢„Ç§„ÉÜ„É†
        ];
        const result = getOptimalColumnWidths(items, 120);

        // 'BRANCH'(6ÊñáÂ≠ó)„Å®'PATH'(4ÊñáÂ≠ó)„ÅÆÈï∑„Åï„ÅØËÄÉÊÖÆ„Åï„Çå„Çã
        expect(result.branchWidth).toBeGreaterThanOrEqual(15); // Math.max(15, Math.min(6, 30))
        expect(result.pathWidth).toBeGreaterThanOrEqual(20); // Math.max(20, Math.min(4, 50))
      });
    });

    describe('ÂπÖÈÖçÂàÜ„ÅÆÊØîÁéá„ÉÜ„Çπ„Éà', () => {
      it('‰ΩôÁôΩ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ4:6ÈÖçÂàÜ', () => {
        const items = [{ branch: 'main', path: '/home/user' }];
        const result = getOptimalColumnWidths(items, 100);
        const totalMinWidth = 35; // 15 + 20
        const remainingWidth = 70; // 100 - 30
        const extraWidth = remainingWidth - totalMinWidth; // 35

        expect(result.branchWidth).toBe(15 + Math.floor(extraWidth * 0.4));
        expect(result.pathWidth).toBe(20 + Math.floor(extraWidth * 0.6));
      });
    });
  });
});
